name: Build and Deploy to GitHub Pages

on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches:
    - main
  workflow_dispatch:
    inputs:
      preview_page:
        description: 'Specific page to preview (e.g., intro.html)'
        required: false
        type: string

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  GH_TOKEN: ${{ secrets.GH_PAT != '' && secrets.GH_PAT || secrets.GITHUB_TOKEN }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      pages: write
      id-token: write

    steps:
    - name: Checkout current branch
      uses: actions/checkout@v4
      with:
        ref: ${{ github.head_ref || github.ref }}
        token: ${{ env.GH_TOKEN }}
        submodules: 'true'

    - name: Display branch information
      run: |
        echo "Running on branch: ${{ github.head_ref || github.ref_name }}"
        echo "Target branch: ${{ github.base_ref }}"
        echo "PR number: ${{ github.event.number }}"
        echo "Commit SHA: ${{ github.sha }}"

    - uses: actions/setup-node@v4
      with:
        node-version: 18.x

    - name: Install MyST Markdown CLI
      run: |
        npm install -g mystmd thebe-core thebe thebe-lite

    - name: Build HTML
      working-directory: ./lectures
      run: |
        myst build --html

    - name: Upload build output
      uses: actions/upload-pages-artifact@v3
      with:
        path: './lectures/_build/html'

    # Deploy to GitHub Pages on main branch push
    - name: Deploy to GitHub Pages
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./lectures/_build/html
        publish_branch: gh-pages
        force_orphan: true

    # Netlify preview for PRs (optional - keep if you want PR previews)
    - name: Install Netlify CLI
      if: github.event_name == 'pull_request'
      run: |
        npm install -g netlify-cli
        mkdir -p ~/.config/netlify

    - name: Deploy Preview to Netlify
      if: github.event_name == 'pull_request'
      id: netlify-deploy
      run: |
        deploy_message="Preview Deploy from GitHub Actions PR #${{ github.event.pull_request.number }} (commit: ${{ github.event.pull_request.head.sha }})"
        
        netlify_output=$(netlify deploy \
          --dir lectures/_build/html/ \
          --site ${{ secrets.NETLIFY_SITE_ID }} \
          --auth ${{ secrets.NETLIFY_AUTH_TOKEN }} \
          --context pr-preview \
          --alias pr-${{ github.event.pull_request.number }} \
          --message "${deploy_message}" \
          --json)
        
        echo "Netlify deployment output:"
        echo "$netlify_output"
        
        deploy_url=$(echo "$netlify_output" | jq -r '.deploy_url')
        
        echo "deploy_url=$deploy_url" >> $GITHUB_OUTPUT
        echo "✅ Deployment completed!"
        echo "🌐 Deploy URL: $deploy_url"
        
        if [ ! -z "${{ github.event.inputs.preview_page }}" ]; then
          echo ""
          echo "🎯 Manual preview page: ${deploy_url}/${{ github.event.inputs.preview_page }}"
        fi
      env:
        NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
        NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

    - name: Post PR Comment with Preview Link
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const deployUrl = `${{ steps.netlify-deploy.outputs.deploy_url }}`;
          const manualPage = `${{ github.event.inputs.preview_page }}`;
          const prNumber = ${{ github.event.pull_request.number }};
          const commitSha = `${{ github.event.pull_request.head.sha }}`;
          const shortSha = commitSha.substring(0, 7);
          
          const comments = await github.rest.issues.listComments({
            issue_number: prNumber,
            owner: context.repo.owner,
            repo: context.repo.repo,
          });
          
          const duplicateComment = comments.data.find(comment => {
            const hasMarker = comment.body.includes('**📖 Netlify Preview Ready!**');
            const hasCommitSha = comment.body.includes(`([${shortSha}]`);
            const hasDeployUrl = comment.body.includes(deployUrl);
            return hasMarker && hasCommitSha && hasDeployUrl;
          });
          
          if (duplicateComment) {
            console.log(`Duplicate comment found, skipping...`);
            return;
          }
          
          const commitUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/commit/${commitSha}`;
          
          let comment = `**📖 Netlify Preview Ready!**\n\n`;
          comment += `**Preview URL:** ${deployUrl} ([${shortSha}](${commitUrl}))\n\n`;
          
          if (manualPage) {
            comment += `🎯 **Manual Preview:** [${manualPage}](${deployUrl}/${manualPage})\n\n`;
          }
          
          comment += `✨ Browse the preview at the URL above.\n`;
          
          await github.rest.issues.createComment({
            issue_number: prNumber,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
      timeout-minutes: 10